# -*- coding: utf-8 -*-
# Generated by Django 1.11.20 on 2019-04-19 07:59
from __future__ import unicode_literals

from django.db import migrations, IntegrityError, transaction


def convert_quality_controls(apps, schema_editor):
    from django.contrib.contenttypes.models import ContentType
    db_alias = schema_editor.connection.alias

    RecordingQualityControl = \
        apps.get_model('corpus', 'RecordingQualityControl')
    SentenceQualityControl = \
        apps.get_model('corpus', 'SentenceQualityControl')

    Recording = \
        apps.get_model('corpus', 'Recording')
    Sentence = \
        apps.get_model('corpus', 'Sentence')

    quality_controls = RecordingQualityControl.objects.using(db_alias).all()

    num_qc = quality_controls.count()
    num_rqc = quality_controls.filter(content_type__model='recording').count()
    num_sqc = quality_controls.filter(content_type__model='sentence').count()

    if num_qc != num_sqc + num_rqc:
        raise Exception("{0} != {1} + {2}".format(num_qc, num_sqc, num_rqc))

    to_delete = []
    for qc in quality_controls:
        ct = ContentType.objects.get(
            model=qc.content_type.model,
            app_label=qc.content_type.app_label)
        content_object = ct.get_object_for_this_type(pk=qc.object_id)
        if 'sentence' in qc.content_type.model:
            print("Converting QC to Sentence QC")
            sentence = Sentence.objects.get(pk=qc.object_id)
            # try:
            #     with transaction.atomic():
            sqc = SentenceQualityControl.objects.using(db_alias).create(
                good=qc.good,
                bad=qc.bad,
                approved=qc.approved,
                approved_by=qc.approved_by,
                trash=qc.trash,
                updated=qc.updated,
                person=qc.person,
                notes=qc.notes,
                machine=qc.machine,
                source=qc.source,
                sentence=sentence)
            # except IntegrityError as e:
            #     if 'duplicate key' in str(e):
            #         print("migration woes")
            #     sqc = None
            if not sqc:
                print("ERROR converting {0}".format(qc))
            else:
                sqc.save()
                to_delete.append(qc.pk)

        elif 'recording' in qc.content_type.model:
            print("Adding recording object to foreignkey field")
            recording = Recording.objects.using(db_alias).get(pk=qc.object_id)
            qc.recording = recording
            qc.save()

        else:
            print("Something bad happened", qc.content_type.model, content_object)

    for pk in to_delete:
        qc = RecordingQualityControl.objects.using(db_alias).get(pk=pk)
        print("Deleting old object {0}".format(pk))
        qc.delete()

    if num_rqc != RecordingQualityControl.objects.using(db_alias).all().count():
        raise Exception('Error migrations recordings qcs')
    if num_sqc != SentenceQualityControl.objects.using(db_alias).all().count():
        raise Exception('Error migrations sentence qcs')

def restore_quality_controls(apps, schema_editor):

    ContentType = apps.get_model('contenttypes', 'ContentType')
    db_alias = schema_editor.connection.alias

    RecordingQualityControl = \
        apps.get_model('corpus', 'RecordingQualityControl')
    SentenceQualityControl = \
        apps.get_model('corpus', 'SentenceQualityControl')

    Recording = \
        apps.get_model('corpus', 'Recording')
    Sentence = \
        apps.get_model('corpus', 'Sentence')

    recording_quality_controls = RecordingQualityControl.objects.all()
    sentence_quality_controls = SentenceQualityControl.objects.all()

    ct = ContentType.objects.get(
        model='sentence',
        app_label='corpus')

    to_delete = []
    for qc in sentence_quality_controls:
        print("Adding sentence_quality_control to quality_control")

        # try:
        #     with transaction.atomic():
        rqc = RecordingQualityControl.objects.using(db_alias).create(
            good=qc.good,
            bad=qc.bad,
            approved=qc.approved,
            approved_by=qc.approved_by,
            trash=qc.trash,
            updated=qc.updated,
            person=qc.person,
            notes=qc.notes,
            machine=qc.machine,
            content_type=ct,
            object_id=qc.sentence.pk,
            source=qc.source)
        # except IntegrityError as e:
        #     if 'duplicate key value violates unique constraint' in str(e):
        #         print('Did we not delete this in migration?')
        #     rqc = None

        if not rqc:
            print("Did not create recording qc")
        else:
            rqc.save()
            to_delete.append(qc.pk)

    for pk in to_delete:
        qc = SentenceQualityControl.objects.using(db_alias).get(pk=pk)
        print("Deleting old object {0}".format(pk))
        qc.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('corpus', '0055_auto_20190419_2251'),
    ]

    operations = [
        migrations.RunPython(
            convert_quality_controls,
            restore_quality_controls),
    ]
