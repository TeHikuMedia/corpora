---

### PLAYBOOK FOR THE LOCAL VAGRANT VM ###

- name: "Launching a local vagrant {{ application_name }} server"
  hosts: localhost
  tasks:
    - name: "Destroy vagrant to start from scratch"
      command: vagrant destroy -f
      when : destroy_vagrant
    - name: "Vagrant Up"
      command: vagrant up
    - name: get Vagrant IP Address
      shell: python inventory/vagrant.py
  vars_files:
    - env_vars/base.yml
    - env_vars/local.yml
    - env_vars/vault.yml
  vars:
    - new_vagrant_created: not destroy_vagrant
  tags:
    - local
    - launch-local


- name: Refresh inventory
  hosts: localhost
  tasks:
    - meta: refresh_inventory
  tags:
    - local

# This should be called by the vagrant file. Hence its special tag
# The downside of this is that we won't see any output.
- name: "Provisioning a local vagrant {{ application_name }} server"
  hosts: vagrant # this will act on all hosts in the vagrant/ansible/inventory which will just be the 1 host from vagrant up
  port: 22
  remote_user: vagrant
  become: true
  #become_user: root
  vars:
    - setup_bitbucket_repo: no
    - apt_upgrade: yes
    - update_apt_cache: yes
    - host_tag: tag_project_env_server_type_{{application_name}}_{{env_type}}_web
  vars_files:
    - env_vars/base.yml
    - env_vars/local.yml
    - env_vars/vault.yml
  roles:
    - base-common
    - base
    - local-db
    - memcached
    - rabbitmq
    - webpack
  tags:
    - local
    - provision
    - provision-local
    - vagrant-provision-local

# DEPLOY:
# this should stop all sevices,  deploy the latest code, and then restart all services
# note that deploy doesn't apply for local vagrant.
- name: "Deploy common web stuff to local {{ application_name }} server"
  hosts: vagrant
  port: 22
  remote_user: vagrant
  become: true
  become_user: root
  vars:
    - setup_bitbucket_repo: no
    - update_apt_cache: yes
    - ec2_solrserver_private_ip: 127.0.0.1
    - server_type: web
    - host_tag: tag_project_env_server_type_{{application_name}}_{{env_type}}_web
  vars_files:
    - env_vars/base.yml
    - env_vars/local.yml
    - env_vars/vault.yml
    - group_vars/local.yml
  roles:
    - web-common
    - web
    # - webpack-build
    - nginx
    - celery
  tags:
    - local
    - deploy
    - deploy-local


# - name: "Build webpack local {{ application_name }}"
#   hosts: tag_project_env_server_type_{{ project_name }}_{{env_type}}_web
#   serial: "100%"
#   remote_user: admin
#   become: true
#   vars:
#     - server_type: web
#   vars_files:
#     - env_vars/base.yml
#     - env_vars/local.yml
#     - env_vars/vault.yml
#     - group_vars/remote.yml
#     - group_vars/local.yml
#   roles:
#     - webpack-build
#   tags:
#     - local
#     - webpack


- name: "Deploy Django App to local {{ application_name }} server"
  hosts: vagrant
  port: 22
  remote_user: vagrant
  become: true
  become_user: root
  vars:
    - setup_bitbucket_repo: no
    - update_apt_cache: yes
    - ec2_solrserver_private_ip: 127.0.0.1
    - server_type: web
    - serer_role: primary
    - host_tag: tag_project_env_server_type_{{application_name}}_{{env_type}}_web
  vars_files:
    - env_vars/base.yml
    - env_vars/local.yml
    - env_vars/vault.yml
    - group_vars/local.yml
  roles:
    - web
  tags:
    - deploy-app
    - deploy-django

- name: "Clean web server before scaling local {{ application_name }}"
  hosts: vagrant
  remote_user: admin
  become: true
  vars:
    - server_type: web
    - host_tag: tag_project_env_server_type_{{application_name}}_{{env_type}}_web
    - ansible_user: admin
  vars_files:
    - env_vars/base.yml
    - env_vars/local.yml
    - env_vars/vault.yml
    - group_vars/remote.yml
    - group_vars/local.yml
  roles:
    - clean-server
  tags:
    - local
    - deploy
    - deploy-django
    - scale
    - clean