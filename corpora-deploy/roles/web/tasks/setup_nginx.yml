---

- name: Install Nginx
  apt: name=nginx update_cache={{ update_apt_cache }} state=present
  tags: packages


## DEVELOPER SELF SIGNED CERTS
## IS THIS STILL REQUIRED? WE DO LOCAL DEV AND PRODUCTION ONLY...?
## OR DO WE ALSO NEED TO RUN A STAGING ENVIRONMENT!


## this is required for local deployments because we need
## https for things like mediastream access so we need to run
## https so we need some certs for that.

# - name: Copy the Developer SSL certificate to the remote server
#   copy:
#     content: "{{ ssl_crt_local }}"
#     dest: "{{ ssl_dest_dir }}/{{ application_name }}.crt"
#   notify: restart nginx
#   when: env_type != 'production'

# - name: Copy the Developer SSL private key to the remote server
#   copy:
#     content: "{{ ssl_key_local }}"
#     dest: "{{ ssl_dest_dir }}/{{ application_name }}.key"
#   notify: restart nginx
#   when: env_type != 'production'

# ## CORPORA NZ CERTS
# - name: Copy the Production SSL certificate to the remote server
#   copy:
#     content: "{{ ssl_crt_production }}"
#     dest: "{{ ssl_dest_dir }}/{{ application_name }}.crt"
#   notify: restart nginx
#   when: env_type == 'production'

# - name: Copy the Production SSL private key to the remote server
#   copy:
#     content: "{{ ssl_key_production }}"
#     dest: "{{ ssl_dest_dir }}/{{ application_name }}.key"
#   notify: restart nginx
#   when: env_type == 'production'

# ## DHPARAM PEM
# - name: Copy the dhparam to the remote server
#   copy:
#     content: "{{ ssl_dhparam_tehiku }}"
#     dest: "{{ ssl_dest_dir }}/{{ application_name }}.pem"
#   notify: restart nginx
#   when: env_type == 'production'

# - name: Copy the dhparam to the remote server
#   copy:
#     content: "{{ ssl_dhparam_local }}"
#     dest: "{{ ssl_dest_dir }}/{{ application_name }}.pem"
#   notify: restart nginx
#   when: env_type == 'local'



- name: Create the Nginx configuration file REMOTE
  template: src=nginx_site_config.j2
            dest=/etc/nginx/sites-available/{{ application_name }}_{{item}}
            backup=yes
  notify:
    - reload nginx
    - restart nginx
  when: env_type != 'local'
  tags:
    - sites  
  loop: "{{django_settings}}"
  loop_control:
    index_var: item_index    

- name: Create the Nginx configuration file LOCAL
  template: src=nginx_site_config_local.j2
            dest=/etc/nginx/sites-available/{{ application_name }}_{{item}}
            backup=yes
  notify:
    - reload nginx
    - restart nginx
  when: env_type == 'local'
  tags:
    - sites  
  loop: "{{django_settings}}"
  loop_control:
    index_var: item_index    

- name: Ensure that the default site is disabled
  command: rm /etc/nginx/sites-enabled/default
           removes=/etc/nginx/sites-enabled/default
  notify:
    - reload nginx
    - restart nginx
  tags:
    - sites

- name: Ensure that the old site is removed
  command: rm /etc/nginx/sites-enabled/{{project_name}}
           removes=/etc/nginx/sites-enabled/{{project_name}}
  notify:
    - reload nginx
    - restart nginx
  tags:
    - sites    

- name: Ensure that the application site is enabled
  command: ln -s /etc/nginx/sites-available/{{ application_name }}_{{item}}
           /etc/nginx/sites-enabled/{{ application_name }}_{{item}}
           creates=/etc/nginx/sites-enabled/{{ application_name }}_{{item}}
  notify:
    - reload nginx
    - restart nginx
  tags:
    - sites  
  loop: "{{django_settings}}"
  loop_control:
    index_var: item_index    

- name: Ensure Nginx service is started
  service: name=nginx state=started enabled=yes
  tags:
    - sites  
