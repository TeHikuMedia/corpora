---

- name: Find AMI ID
  ec2_ami_facts:
    region: "{{aws_region}}"
    owners: self
    filters: 
      name: "AMI-{{ project_name }}-{{env_type}}-{{server_type}}"
  register: ami_facts

- name: Deregister AMI (delete associated snapshots too)
  ec2_ami:
    image_id: "{{ami_facts['images'][0].image_id}}"
    region: "{{aws_region}}"
    delete_snapshot: True
    state: absent
  when: ami_facts['images']|length > 0

- name: Create AMI for deployment
  local_action:
    module: ec2_ami
    instance_id: "{{ec2_server.instance_id}}"
    no_reboot: no
    wait: yes
    name: "AMI-{{ project_name }}-{{env_type}}-{{server_type}}" # Here we always create a new AMI (can we delete old ones automatically?)
    description: "AMI used for auto scaling {{ project_name }} {{env_type}} {{ server_type }}"
    state: present
    region: "{{aws_region}}"
    delete_snapshot: True
    device_mapping:
      - device_name: xvda
        delete_on_termination: True
        volume_type: gp2
        size: 32
    tags:
      env_type: "{{env_type}}" 
      project: "{{ project_name }}"
      server_type: "{{server_type}}"
      env_server_type: "{{env_type}}-{{server_type}}"
      project_env_server_type_role: "{{ project_name }}_{{env_type}}_{{server_type}}_{{server_role}}"
      project_env_server_type: "{{ project_name }}_{{env_type}}-{{server_type}}"
  register: ec2_ami_r
  tags:
    - ec2
    - ami
  # when: ami_find.0 is not defined

- debug: var=ec2_ami_r

- set_fact:
    ec2_ami: "{\"id\": \"{{ec2_ami_r.image_id}}\", \"ami_id\": \"{{ec2_ami_r.image_id}}\", \"image_id\": \"{{ec2_ami_r.image_id}}\" }"

- debug: var=ec2_ami

