---

- name: get elb fascts
  elb_application_lb_facts:
    region: "{{aws_region}}"    
    names:
      - ELB-LB-{{ project_name }}-{{env_type}}-web
  register: elb
  tags:
    - test

- name: Get ARN for ELB TG
  elb_target_group_facts:
    region: "{{aws_region}}"
    names:
      - ELB-TG-{{ project_name }}-{{env_type}}-{{server_type}}
  register: elb_targets
  tags:
    - test

- set_fact:
    tg_id: "{{ elb_targets.target_groups[0].target_group_arn.split('ELB-TG-'+project_name+'-'+env_type+'-'+server_type+'/')[1] }}"
  tags:
    - test

- set_fact:
    elb_id: "{{ elb.load_balancers[0].load_balancer_arn.split('ELB-LB-'+ project_name +'-'+ env_type + '-web/')[1] }}"
  tags:
    - test

- name: Get the primary server ID
  ec2_instance_facts:
    region: "{{aws_region}}"    
    filters:
      "tag:project_env_server_type": "{{ project_name }}_{{env_type}}_web"
      "tag:server_role": "primary"
  register: ec2_primary

- set_fact:
    ec2_primary_id: "{{ ec2_primary.instances[0].instance_id}}"


- name: Delete cloudformation
  local_action:
    module: cloudformation
    region: "{{aws_region}}"
    state: absent
    stack_name: "{{project_name}}-{{env_type}}-ASG-Scaling-Policy-Alarms"
  tags:
    - test-step

- name: Create step scaling policy
  local_action:
    module: cloudformation
    region: "{{aws_region}}"
    template_body: "{{ lookup('template', 'step_scaling_policy.yml') }}"
    state: present
    stack_name: "{{project_name}}-{{env_type}}-ASG-Scaling-Policy-Alarms"
  tags:
    - test-step