---

- include: get_rds_details.yml
  when: "ec2_database is not defined"
  tags: rds
- debug: var=ec2_database
- debug: var=test

- name: Install PostgreSQL tools
  apt: 
    update_cache: "{{ update_apt_cache }}"
    state: installed
    name:
      - libpq-dev
      - python-psycopg2
  tags: 
    - packages
    - database
    - provision

- name: Install PostgreSQL
  apt: name={{ item }} update_cache={{ update_apt_cache }} state=installed
  with_items:
    - postgresql
    - postgresql-contrib
  when: " '{{ec2_database.instance.endpoint}}'  == 'localhost'"
  tags: 
    - packages
    - database
    - provision

- name: Ensure the PostgreSQL service is running
  service: name=postgresql state=started enabled=yes
  when: " '{{ec2_database.instance.endpoint}}'  == 'localhost'"
  tags:
    - database
    - provision

- name: "Delete an existing database with name {{ db_name }}"
  postgresql_db: name={{ db_name }} 
                 state=absent
                 login_host={{ ec2_database.instance.endpoint }}
                 login_password={{ db_password }}
                 login_user={{ db_user }}
  when: "rebuild_database" 
  tags:
    - rebuild-database
    - database
    - provision

- name: Ensure database is created
  #sudo_user: postgres
  postgresql_db: name={{ db_name }}
                 encoding='UTF-8'
                 lc_collate='en_US.UTF-8'
                 lc_ctype='en_US.UTF-8'
                 template='template0'
                 state=present
                 login_host={{ ec2_database.instance.endpoint }}
                 login_password={{ db_password }}
                 login_user={{db_user}}
  tags:
    - rebuild-database
    - provision


### BUG: these wont work for RDS. maybe we don't need to do this temporarily
### https://github.com/ansible/ansible/issues/8384

- name: Ensure user has access to the database
  #sudo_user: postgres
  when: " '{{ec2_database.instance.endpoint}}'  == 'localhost-bug'"
  postgresql_user: db={{ db_name }}
                   name={{ db_user }}
                   password={{ db_password }}
                   priv=ALL
                   state=present
                   login_host={{ ec2_database.instance.endpoint }}
                   login_password={{ db_password }}
                   login_user={{ db_user }}
  tags:
    - rebuild-database
    - provision

- name: Ensure user does not have unnecessary privileges
  when: " '{{ec2_database.instance.endpoint}}'  == 'localhost-bug'"
  #sudo_user: postgres
  postgresql_user: db={{ db_name }}
                   name={{ db_user }}
                   password={{ db_password }}
                   role_attr_flags={{ db_roles }}
                   state=present
                   login_host={{ ec2_database.instance.endpoint }}
                   login_password={{ db_password }}
                   login_user={{db_user}}
  tags:
    - rebuild-database
    - provision

- name: Install postgres extensions
  become: true
  become_user: postgres
  postgresql_ext: name=unaccent 
                  db={{ db_name }}
  tags:
    - build-database
    - postgres-ext
  