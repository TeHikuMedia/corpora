# Tasks for creating security groups
# What happens if security group already exists?
- name: Create Web security group
  when: server_role == 'webserver'
  local_action:
    module: ec2_group
    name: "{{ project_name }}-{{env_type}}-webserver"
    description: "Security group for {{ project_name }} {{env_type}} webserver"
    region: ap-southeast-2
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: icmp
        from_port: -1
        to_port: -1
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 5432
        to_port: 5432
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0  
  register: ec2_group
  tags:
    sg_config

- name: Create Databse security group
  when: server_role == 'database'
  local_action:
    module: ec2_group
    name: "{{ project_name }}-{{env_type}}-database"
    description: "Security group for {{ project_name }} {{env_type}} database server"
    region: ap-southeast-2
    rules:
      - proto: tcp
        from_port: 5432
        to_port: 5432
        group_name: "{{ project_name }}-{{env_type}}-webserver"
  register: ec2_database_group
  tags:
    sg_config

- name: Create Memcached security group
  when: server_role == 'memcached'
  local_action:
    module: ec2_group
    name: "{{ project_name }}-{{env_type}}-memcached"
    description: "Security group for {{ project_name }} {{env_type}} memcached server"
    region: ap-southeast-2
    rules:
      - proto: tcp
        from_port: 11211
        to_port: 11211
        group_name: "{{ project_name }}-{{env_type}}-webserver"
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        from_port: -1
        to_port: -1
        cidr_ip: 0.0.0.0/0
  register: ec2_group
  tags:
    sg_config


# Tasks for launching instances
# What happens if instance already exists? I'm assuming the exact_count = 1 fixes this...
# If an instance is stopped, these will launch new ones. Should they start existing ones?
- name: Launch webserver instance
  when: server_role == 'webserver'
  local_action:
    module: ec2
    region: ap-southeast-2
    keypair: "{{ ec2_key_pair }}"
    group: "{{ project_name }}-{{env_type}}-webserver"
    instance_type: "{{ webserver_instance_type }}"
    image: ami-b740db8d # Debian GNU/Linux - 7.5, released 05/09/2014 - ap-southeast-2 (Sydney)
    wait: yes
    instance_tags:
      webserver: "{{env_type}}"
    exact_count: 1
    count_tag: 
      webserver: "{{env_type}}"
  register: ec2_webserver

- name: Launch memcached instance
  when: server_role == 'memcached'
  local_action:
    module: ec2
    region: ap-southeast-2
    keypair: "{{ ec2_key_pair }}"
    group: "{{ project_name }}-{{ env_type }}-memcached"
    instance_type: "{{ memcached_instance_type }}"
    image: ami-b740db8d # Debian GNU/Linux - 7.5, released 05/09/2014 - ap-southeast-2 (Sydney)
    wait: yes
    instance_tags:
      memcached: "{{env_type}}"
    exact_count: 1
    count_tag: 
      memcached: "{{env_type}}"
  register: ec2_memcached

# It's not necessary to check if the RDS is running because the rds module will only create the RDS if it doesn't exist
# However we *could* save a few seconds if we did a check...
- name: "Launch RDS PostgreSQL {{env_type}} Database instance"
  when: server_role == 'database'
  local_action:
    module: rds
    command: create
    region: ap-southeast-2
    instance_type: "{{ database_instance_type }}"
    instance_name: "{{project_name}}-{{env_type}}-database"
    backup_retention: 30 # Possibly a bug in Ansible means this is ignored? See: <https://github.com/ansible/ansible/pull/6795>
    db_engine: postgres
    port: 5432 # The port must be supplied otherwise it defaults to 3306 (MySQL)
    size: 5 # ???
    subnet: default
    vpc_security_groups: "{{ec2_database_group.group_id}}"
    username: "{{db_user}}" ### better way to do this?
    password: "{{db_password}}" ### better way to do this?
    wait: yes
    wait_timeout: 600
  register: ec2_database

- name: "Get RDS {{env_type}} Database instance facts"
  when: server_role == 'database'
  local_action:
    module: rds
    command: facts
    region: ap-southeast-2
    instance_name: "{{project_name}}-{{env_type}}-database"
  register: ec2_database
- debug: var = ec2_database

# Tasks for tagging and grouping launched instances
- name: Tag instance
  when: server_role == 'webserver'
  local_action: ec2_tag resource={{ item.id }} region=ap-southeast-2 state=present
  with_items: ec2_webserver.tagged_instances 
  args:
    tags:
      Name: "{{project_name}}-{{env_type}}-{{server_role}}"
      env: "{{env_type}}"

# Tasks for tagging and grouping launched instances
- name: Tag instance
  when: server_role == 'memcached'
  local_action: ec2_tag resource={{ item.id }} region=ap-southeast-2 state=present
  with_items: ec2_memcached.tagged_instances
  args:
    tags:
      Name: "{{project_name}}-{{env_type}}-{{server_role}}"
      env: "{{env_type}}"


