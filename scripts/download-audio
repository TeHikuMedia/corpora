#!/usr/bin/python3
import requests
import json
import os
import argparse
import re

DEFAULT_URL = 'https://koreromaori.com/'
DEFAULT_API_PATH = 'api/recordings/?format=json'
DEFAULT_LOGIN_PATH = 'accounts/login/'

word_re = re.compile(r'^(?:(?:ng|wh|[hkmnpqrtw])?[aeiouāēīōū]+)+|\d+$',
                     flags=re.IGNORECASE)

def tidy_up_sentence(s):
    words = re.split(r'[^a-z0-9āēīōū]+', s, flags=re.IGNORECASE)
    for w in words:
        if w and not word_re.match(w):
            print("rejecting %s" % s)
            print("...because of word %r" % w)
            return None
    return ' '.join(words)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--base-url', default=DEFAULT_URL,
                        help="corpora.io base url")
    parser.add_argument('--api-url', default=DEFAULT_API_PATH,
                        help="API url (if not $base/%s)" % DEFAULT_API_PATH)
    parser.add_argument('--login-url', default=DEFAULT_LOGIN_PATH,
                        help="login url (if not $base/%s)" % DEFAULT_LOGIN_PATH)
    parser.add_argument('-t', '--sentence-file', default=os.devnull,
                        help="append sentence text to this file")
    parser.add_argument('-i', '--fileid-file', default=os.devnull,
                        help="append fileids to this file")
    parser.add_argument('-d', '--audio-directory',
                        help="save audio files here")
    parser.add_argument('-l', '--limit', type=int,
                        help="stop after this many files")
    parser.add_argument('-U', '--username',
                        help="login with this username")
    parser.add_argument('-P', '--password',
                        help="login with this password")
    parser.add_argument('--overwrite', action='store_true',
                        help="overwrite already downloaded files")
    parser.add_argument('-A', '--approval-required', action='store_true',
                        help="require an approval to include file")
    parser.add_argument('-V', '--required-net-votes', type=int, default=0,
                        help="require this many votes to include file")
    parser.add_argument('-X', '--exclude-downvoted', action='store_true',
                        default=False, help="negative votes veto files")
    args = parser.parse_args()

    if args.password is None:
        args.password = input('Password: ')

    url = args.base_url
    if '://' in args.login_url:
        login_url = args.login_url
    else:
        login_url = url + args.login_url

    if '://' in args.api_url:
        api_url = args.api_url
    else:
        api_url = url + args.api_url

    session = requests.Session()
    r = session.get(login_url)

    session.headers['Referer'] = url

    csrftoken = ''
    for c in session.cookies:
        if c.name == 'csrftoken':
            csrftoken = c.value

    r = session.post(login_url,
                     data={'login': args.username,
                           'password': args.password,
                           'remember': 'on',
                           'csrfmiddlewaretoken': csrftoken
                     })

    text_file = open(args.sentence_file, "a")
    id_file = open(args.fileid_file, "a")

    downloaded = 0
    file_exists = 0
    while api_url:
        print("fetching a JSON page: %s" % api_url)
        r = session.get(api_url)
        j = r.json()

        for s in j['results']:
            recording_id = '%s' % s['id']
            person_id = '%s' % s['person']
            if (args.approval_required or
                args.required_net_votes or
                args.exclude_downvoted):
                qc = s.get('quality_control')
                if not qc and (args.required_net_votes or
                               args.approval_required):
                    continue
                #print(qc)
                good = sum(x.get('good', 0) for x in qc)
                bad = sum(x.get('bad', 0) for x in qc)
                approved = sum(x.get('approved', 0) for x in qc)
                if (((args.approval_required and not approved) and
                     good - bad < args.required_net_votes) or
                    (bad > 0 and args.exclude_downvoted)):
                    print("skipping %s/%s: votes +%d -%d, approvals: %d" %
                          (person_id, recording_id, good, bad, approved))
                    continue

            t = s['sentence_text']
            if t is None:
                print("sentence_text is null; using sentence->text "
                      "for recording %s" % recording_id)
                t = s['sentence']['text']

            t = tidy_up_sentence(t)
            if t is None:
                print("ignoring sentence %r" % t)
                continue

            print("<s> %s </s> (%s)" % (t, recording_id), file=text_file)
            print("%s/%s" % (person_id, recording_id), file=id_file)

            d = os.path.join(args.audio_directory, person_id)
            fn = os.path.join(d, recording_id)
            audio_url = s['audio_file_url']
            if os.path.exists(fn) and not args.overwrite:
                file_exists += 1
                continue

            print("saving %s as %s" % (audio_url, fn))

            if not os.path.isdir(d):
                os.makedirs(d)

            audio_req = session.get(audio_url)
            f = open(fn, 'wb')
            f.write(audio_req.content)
            downloaded += 1
            if downloaded == args.limit:
                return
        print("downloaded %d files, skipped %d that already exist" %
              (downloaded, file_exists))
        api_url = j.get('next')

main()
